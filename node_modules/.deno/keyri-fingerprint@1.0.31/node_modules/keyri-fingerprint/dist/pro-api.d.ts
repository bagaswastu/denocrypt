import { Environments, IEventParams } from './types';
export declare class FingerprintApi {
    apiKey: string;
    serviceEncryptionKey: string;
    environment: Environments;
    environmentLinks: {
        local: string;
        development: string;
        staging: string;
        production: string;
    };
    baseLink: string;
    apiLinks: Record<string, Function>;
    constructor({ apiKey, serviceEncryptionKey, environment, }: {
        apiKey: string;
        serviceEncryptionKey: string;
        environment?: Environments;
    });
    addNewDevice({ deviceParams, deviceHash, cryptocookie }: {
        deviceParams: Record<string, string>;
        deviceHash: string;
        cryptocookie: string;
    }): Promise<any>;
    createEvent({ eventType, eventResult, signals, userId }: IEventParams, { deviceHash, cryptoCookie }: {
        deviceHash: string;
        cryptoCookie: string;
    }): Promise<any>;
    getKnownDeviceData(devicehash: string, cryptocookie: string): Promise<any>;
}
