import { Environments, IEventParams } from './types';
import { IndexDB } from './utils/idb';
import EZCrypto from "@justinwwolcott/ez-web-crypto";
export declare class Device {
    ezCrypto: EZCrypto;
    private hash;
    private subtle;
    private unknownStringValue;
    private fingerprint;
    screenColorDepth: string;
    colorGamut: string;
    contrastPreferences: string;
    cookiesEnabled: string;
    osInfo: string;
    deviceMemory: string;
    deviceColorsForced: string;
    hardwareConcurrency: string;
    usingHDR: string;
    colorsInverted: string;
    languages: string;
    osCpu: string;
    platform: string;
    screenResolution: string;
    timezone: string;
    touchSupport: string;
    maxTouchPoints: string;
    private gpu;
    gpuVendor: string;
    gpuRenderer: string;
    private navigator?;
    appName: string;
    appVersion: string;
    userAgent: string;
    pdfViewerEnabled: string;
    appCodeName: string;
    product: string;
    currentBrowserBuildNumber: string;
    screenFrame: string;
    connection: string;
    fonts: string;
    domBlockers: string;
    fontPreferences: string;
    audioFingerprint: string;
    sessionStorage: string;
    localStorage: string;
    indexedDB: string;
    openDatabase: string;
    cpuClass: string;
    plugins: string;
    canvas: string;
    vendorFlavors: string;
    monochromeDepth: string;
    motionReduced: string;
    math: string;
    architecture: string;
    isPrivate: string;
    db: IndexDB | undefined;
    adBlockers: string;
    doNotTrack: string;
    navigatorPropertiesCount: string;
    buildID: string;
    javaEnabled: string;
    browserPermissions: string;
    supportedAudioFormats: string;
    supportedVideoFormats: string;
    audioContext: string;
    frequencyAnalyserProperties: string;
    battery: string;
    private dbName;
    private storeName;
    private cryptoKeyId;
    private api;
    cloudDevice: Record<any, any> | null;
    constructor({ apiKey, serviceEncryptionKey, environment, }?: {
        apiKey?: string;
        serviceEncryptionKey?: string;
        environment?: Environments;
    });
    me(): Promise<any>;
    generateEvent(eventParams: IEventParams): Promise<any>;
    synchronizeDevice(): Promise<Record<any, any> | null>;
    private getConnectionParams;
    private getBatteryInfo;
    private getFrequencyAnalyserProperties;
    private getAudioContextProperties;
    private getSupportedVideoFormats;
    private getSupportedAudioFormats;
    private getBrowserPermissions;
    private handleDoNotTrackValue;
    private convertNavigatorToNumber;
    private getPreCachedCryptoCookie;
    private adBlockUsing;
    private getB64KeysFromKeyPair;
    private getB64KeyFromCryptoKey;
    private generateKeyPair;
    private getPublicKeyFromPrivate;
    private generateB64PublicKeyFromPrivateKey;
    initCryptoCookie(): Promise<string>;
    private clearStorages;
    private loadResult;
    load(): Promise<any>;
    createFingerprintHash(): string;
    getMainParams(): Record<string, string>;
    private getArchitecture;
    private getMathFingerprint;
    private getMonochromeDepth;
    private getVendorFlavors;
    private isMotionReduced;
    private getCanvasFingerprint;
    private getFonts;
    private getOpenDatabase;
    private getIndexedDB;
    private getSessionStorage;
    private getLocalStorage;
    private getDomBlockers;
    private isDomBlockersApplicable;
    private getBlockedSelectors;
    private forceShowSelector;
    private getFontPreferences;
    /**
     * Creates a DOM environment that provides the most natural font available, including Android OS font.
     * Measurements of the elements are zoom-independent.
     * Don't put a content to measure inside an absolutely positioned element.
     */
    private withNaturalFonts;
    private getAudioFingerprint;
    private startRenderingAudio;
    private getAudioHash;
    private makeInnerError;
    private doesCurrentBrowserSuspendAudioContext;
    private getVideoCardInfo;
    private getColorDepth;
    private getColorGamut;
    private getContrastPreference;
    private areCookiesEnabled;
    private getOSInfo;
    private getCpuClass;
    private getNavigatorValues;
    private getDeviceMemory;
    private areColorsForced;
    private getHardwareConcurrency;
    private isHDR;
    private areColorsInverted;
    private getLanguages;
    private getOsCpu;
    private getPlatform;
    private getPlugins;
    private screenFrameBackup?;
    private screenFrameSizeTimeoutId?;
    private screenFrameCheckInterval;
    private watchScreenFrame;
    private getScreenFrame;
    private getRoundedScreenFrame;
    private getCurrentScreenFrame;
    private isFrameSizeNull;
    private getScreenResolution;
    private getTimezoneOffset;
    private getTimezone;
    private getTouchSupport;
    private isIncognitoMode;
}
